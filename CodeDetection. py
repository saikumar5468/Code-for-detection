image_path = 'test_image.jpg' |

Window

damage_score detect_damage (image_path)

if damage score > 0.5:

print("Road damage detected!")

else:

print("No road damage detected.")

with detection graph.as default():

with tf.Session (graph-detection_graph) as sess:

image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')

detection_boxes = detection_graph.get_tensor_by_name('detection_boxes:0')

detection scores detection graph.get tensor by name('detection scores:0')

detection_classes detection_graph.get_tensor_by_name('detection_classes:0')

num detections detection_graph.get tensor by name('num detections:0')

for image path in TEST IMAGE PATHS:

image Image.open(image path)

image np load image into numpy array(image)

image np expanded = np.expand_dims (image np, axis=0)

(boxes, scores, classes, num) sess.run( [detection_boxes, detection_scores, detection_classes, num_detections], feed dict={image tensor: image np expanded})

vis util.visualize boxes and labels on image array ( image np, np. squeeze (boxes), np.squeeze (classes).astype (np.int32), np. squeeze (scores), category index, use normalized coordinates=True,

min score thresh=0.3,

line thickness=8)

plt.figure(figsize=IMAGE SIZE)

plt.imshow(image_np)

cls names = []

total images = 0

for gov in govs:

file_list = [filename for filename in os.listdir (base path + gov + '/Annotations/') if not filename.startswith('.')]

for file in file_list:

total images total images + 1

if file .DS Store:

pass

else:
